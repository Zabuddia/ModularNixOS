# sudo mkdir -p /etc/secrets
# # create or update the token file (root-only)
# echo '<YOUR_CLOUDFLARE_API_TOKEN>' | sudo tee /etc/secrets/cloudflare-token >/dev/null
# sudo chmod 600 /etc/secrets/cloudflare-token
# sudo chown root:root /etc/secrets/cloudflare-token

# # restart ddclient to pick it up
# sudo systemctl restart ddclient

{ config, lib, pkgs, hostServices ? [], ... }:

let
  # Where the Cloudflare API token lives (file readable by root only).
  # Change this to your sops/agenix secret path if you use one:
  passwordPath = "/etc/cloudflare-ddns-token";

  # Accept either .host (for caddy-wan) or .domain (tailscale/caddy-lan);
  # prefer .host if present.
  fqdnOf = s: (s.host or s.domain or null);

  # Collect unique FQDNs from the host's services.
  uniqFqdns =
    let all = builtins.filter (x: x != null) (map fqdnOf hostServices);
    in lib.unique all;

  # Very simple zone extraction: last two labels (e.g. zabuddia.org).
  # (Note: won't handle public-suffix oddities like "co.uk".)
  zoneOf = fqdn:
    let parts = lib.splitString "." fqdn;
        n     = builtins.length parts;
    in if n >= 2 then
         "${builtins.elemAt parts (n - 2)}.${builtins.elemAt parts (n - 1)}"
       else fqdn;

  # Map zone -> list of FQDNs
  zonesToDomains =
    lib.foldl'
      (acc: d:
        let z = zoneOf d;
            prev = acc.${z} or [];
        in acc // { ${z} = prev ++ [ d ]; }
      )
      {}
      uniqFqdns;

  # ddclient.conf header with common defaults.
  confHeader = ''
    # Generated by NixOS
    daemon=300
    syslog=yes
    pid=/run/ddclient/ddclient.pid
    ssl=yes

    # Detect public IPv4/IPv6 via web
    use=web, web=ipify-ipv4
    usev6=web, web=ipify-ipv6
  '';

  # One Cloudflare block per zone.
  perZoneBlocks = lib.concatStringsSep "\n\n"
    (lib.mapAttrsToList (z: ds: ''
      protocol=cloudflare
      zone=${z}
      password=${passwordPath}
      ${lib.concatStringsSep "\n" ds}
    '') zonesToDomains);

  confText =
    if uniqFqdns == [] then
      "# ddclient: no FQDNs found in hostServices; not generating config.\n"
    else
      confHeader + "\n\n" + perZoneBlocks + "\n";

in {
  assertions = [
    { assertion = uniqFqdns != [];
      message = "ddclient: No FQDNs found in hostServices (.host or .domain)." ; }
  ];

  # Write a full ddclient.conf with multiple zone blocks.
  environment.etc."ddclient.conf" = {
    text = confText;
    mode = "0600";
  };

  # Run the stock ddclient service using our generated config file.
  services.ddclient = {
    enable = true;
    configFile = "/etc/ddclient.conf";  # tells the module to use our file verbatim
    package = pkgs.ddclient;
    quiet = false;
    verbose = true;
  };

  # (Optional) ship the token once for quick-start; prefer sops/agenix in prod.
  # environment.etc."cloudflare-ddns-token".text = "<YOUR_CF_API_TOKEN>";
  # environment.etc."cloudflare-ddns-token".mode = "0600";
}