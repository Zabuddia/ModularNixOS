{ config, lib, pkgs, hostServices ? [], ... }:

let
  # Pull FQDNs from your hostServices entries (.host preferred, else .domain)
  fqdnOf   = s: (s.host or s.domain or null);
  hsFqdns  = builtins.filter (x: x != null) (map fqdnOf hostServices);
  allFqdns = lib.unique hsFqdns;

  # Zone = last two labels (zabuddia.org → "zabuddia.org")
  zoneOf = fqdn:
    let parts = lib.splitString "." fqdn; n = builtins.length parts;
    in if n >= 2
       then "${builtins.elemAt parts (n - 2)}.${builtins.elemAt parts (n - 1)}"
       else fqdn;

  zone     = if allFqdns == [] then null else zoneOf (builtins.head allFqdns);
  sameZone = lib.all (d: zoneOf d == zone) allFqdns;

  # ddclient.conf (no secrets: points at /etc/ddclient.token)
  ddclientConf = ''
    # Generated by ddclient.nix
    # Global settings
    daemon=300
    protocol=cloudflare
    server=api.cloudflare.com/client/v4
    use=web, web=ipify-ipv4
    cache=/var/cache/ddclient/ddclient.cache
    ssl=yes
    quiet=yes

    # Cloudflare auth: use an API token stored outside the Nix store
    login=token
    password=/etc/ddclient.token

    # Zone and hostnames (expects a single zone)
    zone=${zone}
    ${lib.concatStringsSep "\n" allFqdns}
  '';
  confPath = pkgs.writeText "ddclient.conf" ddclientConf;
in {
  #### Safety checks
  assertions = [
    { assertion = allFqdns != [];
      message   = "ddclient: No FQDNs found in hostServices (.host or .domain)." ; }
    { assertion = sameZone;
      message   = "ddclient: Multiple zones detected; this config expects a single zone." ; }
  ];

  #### Use the official NixOS module
  services.ddclient = {
    enable     = true;
    configFile = confPath;   # we supply a full config
    package    = pkgs.ddclient;
    # (Other options are ignored when configFile is provided.)
  };

  #### Service hardening & cache dir
  systemd.services.ddclient = {
    unitConfig.ConditionPathExists = "/etc/ddclient.token"; # don’t start without the secret
    serviceConfig = {
      # Create /var/cache/ddclient with safe perms
      CacheDirectory = "ddclient";
      # ddclient already daemonizes per config; let systemd keep it up
      RestartSec  = 10;
      # Run as root (ddclient typically needs it for writing cache & reading /etc)
      User = "root";
    };
    wantedBy = [ "multi-user.target" ];
    after    = [ "network-online.target" ];
    wants    = [ "network-online.target" ];
  };
}